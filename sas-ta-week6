##1：factor order ##類別變數可以變成factor 有層級關係（不同意、普通、同意...）
grade<-factor(c('丙','丁','戊','甲','乙'),levels=c('戊','丁','丙','乙','甲'),order=T) #order 可以排序
grade[3]>grade[1]
str(grade)

##2：dplyr
library(ggplot2)
library(dplyr)
data(diamonds)
?diamonds #help diamonds

head(diamonds) #前六筆資料
summary(diamonds)
str(diamonds$cut)
str(diamonds$color)
str(diamonds$clarity)#都是order factor

diamonds$cut[1]>diamonds$cut[6]
diamonds$color[1]>diamonds$color[6]

#select()：選取變數
select1_1<-select(diamonds,price,starts_with("c")) #price 之中c開頭的
select1_2<-select(diamonds,ends_with("e"))
select1_3<-select(diamonds,contains("ri"))

head(select1_1)
head(select1_2)
head(select1_3)

select2<-select(diamonds,x:z)
select2

select3<-diamonds[,8:10]
select3

#filter()：選取某些觀察值
filter1<-filter(diamonds,price>10000)
filter1

filter2<-filter(diamonds,cut %in% c("Ideal","Premium")) #顯示ideal or premium
filter2

filter3<-filter(diamonds,x*y*z>100)
filter3

filter4<-filter(diamonds,price>2000 & cut>="Very Good") #因為cut是有次序的 所以透過>＝可以挑出等級更好的
filter4

#group_by()：群組之間比較
#summarise()：資料摘要
group1<-group_by(diamonds,cut) %>% 
  summarise(nDiamond=n(),MeanPrice=mean(price)) #計算分組後的資料 #n()計算數量
group1

#arrange()：重新排列
arrange1<-arrange(diamonds,carat)
arrange1

arrange2<-arrange(diamonds,desc(carat)) 
arrange2

arrange3<-arrange(diamonds,desc(carat),desc(price)) #先由克拉排序再由價格由大到小排列
arrange3

#mutate()：以現有變數創造新的變數
mutate1<-mutate(diamonds,gram=carat*0.2)
mutate1

#補充：save() & load()
save(arrange3,file="arrange") #儲存到檔案 ＃file="" 命名為 
save(arrange1,arrange2,file="A")
load("arrange") #重新load回來
load("A")

#### exercise ####
read.csv(full.table)

